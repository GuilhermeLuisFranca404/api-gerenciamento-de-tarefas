package io.github.gulybyte.todo.exceptions;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;

import io.github.gulybyte.todo.util.ITTestUtils;

import java.util.Map;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.*;

/**
 * BAD REQUEST EXCEPTIONS ARE GENERALLY GENERATED BY jakarta.validation.Valid
 * SO IT IS NECESSARY TO TEST THEM IN INTEGRATION TESTS
*/
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureTestDatabase
@ActiveProfiles("test")
public class ITTodoTestBadRequest extends ITTestUtils {

    @Autowired
    private TestRestTemplate testRest;


    @Test
    void save() {

        var response = testRest.postForEntity("/",
            createRequestEntity(createTodoWithoutDescription()),
            ANY_RESPONSE_TYPE);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("description", fieldsInExceptionDetails(response));

    }

    @Test
    @Sql(scripts = {"/sql/todo_DELETE_ALL.sql","/sql/todo_INSERT_ONE.sql"}, executionPhase = BEFORE_TEST_METHOD)
    void updateDescription() {

        var response = testRest.exchange("/update-description", HttpMethod.PATCH,
            createRequestEntity(anyTodoDescriptionFilter(createTodoDescriptionFilterWithoutIdAndDescription())),
            ANY_RESPONSE_TYPE);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        var fieldsException = fieldsInExceptionDetails(response);

        assertTrue((fieldsException.equals("description, id") || fieldsException.equals("id, description")));

    }

    @Test
    @Sql(scripts = {"/sql/todo_DELETE_ALL.sql","/sql/todo_INSERT_ONE.sql"}, executionPhase = BEFORE_TEST_METHOD)
    void updateContext() {

        var response = testRest.exchange("/update-context", HttpMethod.PATCH,
            createRequestEntity(anyTodoContextFilter(createTodoContextFilterWithoutIdAndContext())),
            ANY_RESPONSE_TYPE);

        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        var fieldsException = fieldsInExceptionDetails(response);

        assertTrue((fieldsException.equals("context, id") || fieldsException.equals("id, context")));

    }


    private static Object fieldsInExceptionDetails(ResponseEntity<?> obj) {
        return ((Map<?, ?>) obj.getBody()).get("fields");
    }

}
